# -*- coding: utf-8 -*-
"""
Created on Wed Mar 16 23:34:04 2016
C4W3 Lasso Regression
@author: cesar
"""

#from pandas import Series, DataFrame
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
from sklearn.cross_validation import train_test_split
from sklearn.linear_model import LassoLarsCV
import os

os.chdir("/home/cesar/Documentos/cesar/Profesional/Formacion/Wesleyan University/Machine Learning")

"""
Data Engineering and Analysis
"""
#Load the dataset
gapminder = pd.read_csv("/home/cesar/Documentos/cesar/Profesional/Formacion/Wesleyan University/Data Analysis Tools/gapminder.csv", low_memory=False)

gapminder['breastcancerper100th'] = gapminder['breastcancerper100th'].convert_objects(convert_numeric=True)
gapminder['co2emissions'] = gapminder['co2emissions'].convert_objects(convert_numeric=True)
gapminder['urbanrate'] = gapminder['urbanrate'].convert_objects(convert_numeric=True)
gapminder['incomeperperson'] = gapminder['incomeperperson'].convert_objects(convert_numeric=True)
gapminder['alcconsumption'] = gapminder['alcconsumption'].convert_objects(convert_numeric=True)
gapminder['femaleemployrate'] = gapminder['femaleemployrate'].convert_objects(convert_numeric=True)
gapminder['internetuserate'] = gapminder['internetuserate'].convert_objects(convert_numeric=True)
gapminder['relectricperperson'] = gapminder['relectricperperson'].convert_objects(convert_numeric=True)


data_clean = gapminder[['country','breastcancerper100th','co2emissions','urbanrate','incomeperperson','alcconsumption','femaleemployrate','internetuserate','relectricperperson']].dropna()

def Cancerbreast2BIN (x):
   if x['breastcancerper100th']>data_clean['breastcancerper100th'].mean():
      return 1
   else: 
      return 0
data_clean['Cancerbreast2BIN'] = data_clean.apply (lambda x: Cancerbreast2BIN (x), axis=1)

data_clean.dtypes
data_clean.describe()

"""
Modeling and Prediction
"""
#Split into training and testing sets

predictors = data_clean[['co2emissions','urbanrate','incomeperperson','alcconsumption','femaleemployrate','internetuserate','relectricperperson']]

targets = data_clean.Cancerbreast2BIN

# standardize predictors to have mean=0 and sd=1
from sklearn import preprocessing
predictors['co2emissions']=preprocessing.scale(predictors['co2emissions'].astype('float64'))
predictors['urbanrate']=preprocessing.scale(predictors['urbanrate'].astype('float64'))
predictors['incomeperperson']=preprocessing.scale(predictors['incomeperperson'].astype('float64'))
predictors['alcconsumption']=preprocessing.scale(predictors['alcconsumption'].astype('float64'))
predictors['femaleemployrate']=preprocessing.scale(predictors['femaleemployrate'].astype('float64'))
predictors['internetuserate']=preprocessing.scale(predictors['internetuserate'].astype('float64'))
predictors['relectricperperson']=preprocessing.scale(predictors['relectricperperson'].astype('float64'))

# split data into train and test sets
pred_train, pred_test, tar_train, tar_test  =   train_test_split(predictors, targets, test_size=.4,random_state=123)

pred_train.shape
pred_test.shape
tar_train.shape
tar_test.shape
# specify the lasso regression model
model=LassoLarsCV(cv=10, precompute=False).fit(pred_train,tar_train)

# print variable names and regression coefficients
dict(zip(predictors.columns, model.coef_))

# plot coefficient progression
m_log_alphas = -np.log10(model.alphas_)
ax = plt.gca()
plt.plot(m_log_alphas, model.coef_path_.T)
plt.axvline(-np.log10(model.alpha_), linestyle='--', color='k',
            label='alpha CV')
plt.ylabel('Regression Coefficients')
plt.xlabel('-log(alpha)')
plt.title('Regression Coefficients Progression for Lasso Paths')

# plot mean square error for each fold
m_log_alphascv = -np.log10(model.cv_alphas_)
plt.figure()
plt.plot(m_log_alphascv, model.cv_mse_path_, ':')
plt.plot(m_log_alphascv, model.cv_mse_path_.mean(axis=-1), 'k',
         label='Average across the folds', linewidth=2)
plt.axvline(-np.log10(model.alpha_), linestyle='--', color='k',
            label='alpha CV')
plt.legend()
plt.xlabel('-log(alpha)')
plt.ylabel('Mean squared error')
plt.title('Mean squared error on each fold')
         

# MSE from training and test data
from sklearn.metrics import mean_squared_error
train_error = mean_squared_error(tar_train, model.predict(pred_train))
test_error = mean_squared_error(tar_test, model.predict(pred_test))
print ('training data MSE')
print(train_error)
print ('test data MSE')
print(test_error)

# R-square from training and test data
rsquared_train=model.score(pred_train,tar_train)
rsquared_test=model.score(pred_test,tar_test)
print ('training data R-square')
print(rsquared_train)
print ('test data R-square')
print(rsquared_test)
